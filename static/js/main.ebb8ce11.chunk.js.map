{"version":3,"sources":["LottieItem.tsx","images/BackgroundRed.png","images/BackgroundAngry.jpg","Animation.tsx","reportWebVitals.ts","index.tsx"],"names":["LottieItem","animation","loop","options","autoplay","animationData","rendererSettings","preserveAspectRatio","height","width","isStopped","isClickToPauseDisabled","Animation","useState","isJump","setIsJump","isAngry","setIsAngry","isSmile","setIsSmile","css","backgroundImage","container","serif","stage","jump","smile","angry","onClick","button","scroll","keyframes","BackgroundAngry","BackgroundRed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAQaA,EAAyB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KAClD,OACE,cAAC,IAAD,CACEC,QAAS,CACPD,KAAMA,EACNE,UAAU,EACVC,cAAeJ,EACfK,iBAAkB,CAChBC,oBAAqB,mBAGzBC,OAAQ,IACRC,MAAO,IACPC,WAAW,EACXC,wBAAwB,K,wBCtBf,MAA0B,0CCA1B,MAA0B,4C,OCU5BC,EAAY,WAAO,IAAD,EACDC,oBAAS,GADR,mBACtBC,EADsB,KACdC,EADc,OAECF,oBAAS,GAFV,mBAEtBG,EAFsB,KAEbC,EAFa,OAGCJ,oBAAS,GAHV,mBAGtBK,EAHsB,KAGbC,EAHa,KAoB7B,OACE,0BACE,mBAAKC,IAAK,CAACC,EAAgBL,IAA3B,SACE,mBAAKI,IAAKE,EAAV,UACE,mBAAKF,IAAKG,EAAV,oEACA,mBAAKH,IAAKI,EAAV,UACGV,GAAU,YAAC,EAAD,CAAYb,UAAWwB,EAAMvB,MAAM,IAC7CgB,GAAW,YAAC,EAAD,CAAYjB,UAAWyB,EAAOxB,MAAM,IAC/Cc,GAAW,YAAC,EAAD,CAAYf,UAAW0B,EAAOzB,MAAM,OAGlD,sBAAQ0B,QA1BQ,WACtBb,GAAU,GACVE,GAAW,GACXE,GAAW,IAuB6BC,IAAKS,EAAvC,wDAGA,sBAAQD,QAnBS,WACvBT,GAAW,GACXF,GAAW,GACXF,GAAU,IAgB+BK,IAAKS,EAAxC,sCAGA,sBAAQD,QA3BS,WACvBX,GAAW,GACXF,GAAU,GACVI,GAAW,IAwB8BC,IAAKS,EAAxC,oDASJC,EAASC,YAAH,8EAMNV,EAAkB,SAACL,GAAD,OAAsBI,YAArB,IAAD,gJACpBJ,EAAO,gCAEWgB,EAFX,oEAKWC,EALX,uCAOIjB,GAAWc,IAOpBP,EAAQH,YAAH,udAsBLE,EAAYF,YAAH,oEAITI,EAAQJ,YAAH,mEAKLS,EAAST,YAAH,uQC9FGc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.ebb8ce11.chunk.js","sourcesContent":["import Lottie, { Options } from \"react-lottie\";\nimport { VFC } from \"react\";\n\ntype Props = {\n  animation: Options[\"animationData\"];\n  loop: boolean;\n};\n\nexport const LottieItem: VFC<Props> = ({ animation, loop }) => {\n  return (\n    <Lottie\n      options={{\n        loop: loop,\n        autoplay: true,\n        animationData: animation,\n        rendererSettings: {\n          preserveAspectRatio: \"xMidYMid slice\",\n        },\n      }}\n      height={375}\n      width={360}\n      isStopped={true}\n      isClickToPauseDisabled={true}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/BackgroundRed.97797847.png\";","export default __webpack_public_path__ + \"static/media/BackgroundAngry.d0c342da.jpg\";","/** @jsxImportSource @emotion/react */\nimport { css, keyframes } from \"@emotion/react\";\nimport React, { useState } from \"react\";\nimport { LottieItem } from \"./LottieItem\";\nimport angry from \"./animationData/angry.json\";\nimport smile from \"./animationData/smile.json\";\nimport jump from \"./animationData/jump.json\";\nimport BackgroundRed from \"./images/BackgroundRed.png\";\nimport BackgroundAngry from \"./images/BackgroundAngry.jpg\";\n\nexport const Animation = () => {\n  const [isJump, setIsJump] = useState(true);\n  const [isAngry, setIsAngry] = useState(false);\n  const [isSmile, setIsSmile] = useState(false);\n\n  const handleClickJump = () => {\n    setIsJump(true);\n    setIsAngry(false);\n    setIsSmile(false);\n  };\n  const handleClickAngry = () => {\n    setIsAngry(true);\n    setIsJump(false);\n    setIsSmile(false);\n  };\n  const handleClickSmile = () => {\n    setIsSmile(true);\n    setIsAngry(false);\n    setIsJump(false);\n  };\n  return (\n    <>\n      <div css={[backgroundImage(isAngry)]}>\n        <div css={container}>\n          <div css={serif}>Qiitanに話しかけよう！</div>\n          <div css={stage}>\n            {isJump && <LottieItem animation={jump} loop={true} />}\n            {isSmile && <LottieItem animation={smile} loop={false} />}\n            {isAngry && <LottieItem animation={angry} loop={false} />}\n          </div>\n\n          <button onClick={handleClickJump} css={button}>\n            ジャンプして！\n          </button>\n          <button onClick={handleClickSmile} css={button}>\n            笑って！\n          </button>\n          <button onClick={handleClickAngry} css={button}>\n            怒った…？\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst scroll = keyframes`\n  100% {\n    background-position: -100% 0;\n  }\n`;\n\nconst backgroundImage = (isAngry: boolean) => css`\n  ${isAngry\n    ? `\n    background: url(${BackgroundAngry}) no-repeat top center/100%;\n  `\n    : `\n    background: url(${BackgroundRed}) repeat-x center center/100vw;\n  `}\n  animation: ${isAngry || scroll} 60s linear infinite;\n  height: 812px;\n  margin: auto;\n  position: relative;\n  width: 375px;\n`;\n\nconst serif = css`\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);\n  font-size: 16px;\n  font-weight: bold;\n  margin: auto;\n  padding: 16px;\n  position: sticky;\n  top: 16px;\n  width: calc(100% - 16px - 16px);\n\n  &::before {\n    border: 15px solid transparent;\n    border-top: 15px solid #fff;\n    content: \"\";\n    left: 50%;\n    position: absolute;\n    transform: translateX(-50%);\n    top: 100%;\n  }\n`;\nconst container = css`\n  margin: auto;\n  padding: 24px 16px;\n`;\nconst stage = css`\n  height: 375px;\n  margin-top: 24px;\n`;\n\nconst button = css`\n  background: #fff;\n  margin-top: 8px;\n  border: 1px solid #b81c22;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  padding: 16px;\n  width: 100%;\n  &:hover {\n    background: #b81c22;\n    color: #d7c447;\n  }\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Animation } from \"./Animation\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Animation />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}