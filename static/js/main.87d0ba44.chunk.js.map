{"version":3,"sources":["LottieItem.tsx","images/BackgroundRed.png","images/BackgroundAngry.jpg","Animation.tsx","reportWebVitals.ts","index.tsx"],"names":["LottieItem","animation","loop","options","autoplay","animationData","rendererSettings","preserveAspectRatio","height","width","isStopped","isClickToPauseDisabled","Animation","useState","action","setAction","isJump","isSmile","isAngry","css","backgroundImage","container","serif","stage","jump","smile","angry","onClick","button","scroll","keyframes","BackgroundAngry","BackgroundRed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAQaA,EAAyB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,KAClD,OACE,cAAC,IAAD,CACEC,QAAS,CACPD,KAAMA,EACNE,UAAU,EACVC,cAAeJ,EACfK,iBAAkB,CAChBC,oBAAqB,mBAGzBC,OAAQ,IACRC,MAAO,IACPC,WAAW,EACXC,wBAAwB,K,wBCtBf,MAA0B,0CCA1B,MAA0B,4C,OCY5BC,EAAiB,WAAO,IAAD,EACNC,mBAAiB,QADX,mBAC3BC,EAD2B,KACnBC,EADmB,KAG5BC,EAAoB,SAAXF,EACTG,EAAqB,UAAXH,EACVI,EAAqB,UAAXJ,EAEhB,OACE,mBAAKK,IAAK,CAACC,EAA2B,UAAXN,IAA3B,SACE,mBAAKK,IAAKE,EAAV,UACE,mBAAKF,IAAKG,EAAV,oEACA,mBAAKH,IAAKI,EAAV,UACGP,GAAU,YAAC,EAAD,CAAYf,UAAWuB,EAAMtB,MAAM,IAC7Ce,GAAW,YAAC,EAAD,CAAYhB,UAAWwB,EAAOvB,MAAM,IAC/CgB,GAAW,YAAC,EAAD,CAAYjB,UAAWyB,EAAOxB,MAAM,OAGlD,sBAAQyB,QAAS,kBAAMZ,EAAU,SAASI,IAAKS,EAA/C,oEAGA,sBAAQD,QAAS,kBAAMZ,EAAU,UAAUI,IAAKS,EAAhD,kDAGA,sBAAQD,QAAS,kBAAMZ,EAAU,UAAUI,IAAKS,EAAhD,8DAQFC,EAASC,YAAH,8EAMNV,EAAkB,SAACF,GAAD,OAAsBC,YAArB,IAAD,gJACpBD,EAAO,gCAEWa,EAFX,oEAKWC,EALX,uCAOId,GAAWW,IAOpBP,EAAQH,YAAH,udAsBLE,EAAYF,YAAH,oEAITI,EAAQJ,YAAH,mEAKLS,EAAST,YAAH,uQCjFGc,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.87d0ba44.chunk.js","sourcesContent":["import Lottie, { Options } from \"react-lottie\";\nimport { VFC } from \"react\";\n\ntype Props = {\n  animation: Options[\"animationData\"];\n  loop: boolean;\n};\n\nexport const LottieItem: VFC<Props> = ({ animation, loop }) => {\n  return (\n    <Lottie\n      options={{\n        loop: loop,\n        autoplay: true,\n        animationData: animation,\n        rendererSettings: {\n          preserveAspectRatio: \"xMidYMid slice\",\n        },\n      }}\n      height={375}\n      width={360}\n      isStopped={true}\n      isClickToPauseDisabled={true}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/BackgroundRed.97797847.png\";","export default __webpack_public_path__ + \"static/media/BackgroundAngry.d0c342da.jpg\";","/** @jsxImportSource @emotion/react */\nimport { css, keyframes } from \"@emotion/react\";\nimport { VFC, useState } from \"react\";\nimport { LottieItem } from \"./LottieItem\";\nimport angry from \"./animationData/angry.json\";\nimport smile from \"./animationData/smile.json\";\nimport jump from \"./animationData/jump.json\";\nimport BackgroundRed from \"./images/BackgroundRed.png\";\nimport BackgroundAngry from \"./images/BackgroundAngry.jpg\";\n\ntype Action = \"jump\" | \"smile\" | \"angry\";\n\nexport const Animation: VFC = () => {\n  const [action, setAction] = useState<Action>(\"jump\");\n\n  const isJump = action === \"jump\";\n  const isSmile = action === \"smile\";\n  const isAngry = action === \"angry\";\n\n  return (\n    <div css={[backgroundImage(action === \"angry\")]}>\n      <div css={container}>\n        <div css={serif}>Qiitanに話しかけよう！</div>\n        <div css={stage}>\n          {isJump && <LottieItem animation={jump} loop={true} />}\n          {isSmile && <LottieItem animation={smile} loop={false} />}\n          {isAngry && <LottieItem animation={angry} loop={false} />}\n        </div>\n\n        <button onClick={() => setAction(\"jump\")} css={button}>\n          Qiitan、ジャンプして！\n        </button>\n        <button onClick={() => setAction(\"smile\")} css={button}>\n          Qiitan、笑って！\n        </button>\n        <button onClick={() => setAction(\"angry\")} css={button}>\n          Qiitan、怒った…？\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst scroll = keyframes`\n  100% {\n    background-position: -100% 0;\n  }\n`;\n\nconst backgroundImage = (isAngry: boolean) => css`\n  ${isAngry\n    ? `\n    background: url(${BackgroundAngry}) no-repeat top center/100%;\n  `\n    : `\n    background: url(${BackgroundRed}) repeat-x center center/100vw;\n  `}\n  animation: ${isAngry || scroll} 60s linear infinite;\n  height: 812px;\n  margin: auto;\n  position: relative;\n  width: 375px;\n`;\n\nconst serif = css`\n  background-color: #fff;\n  border-radius: 8px;\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.2);\n  font-size: 16px;\n  font-weight: bold;\n  margin: auto;\n  padding: 16px;\n  position: sticky;\n  top: 16px;\n  width: calc(100% - 16px - 16px);\n\n  &::before {\n    border: 15px solid transparent;\n    border-top: 15px solid #fff;\n    content: \"\";\n    left: 50%;\n    position: absolute;\n    transform: translateX(-50%);\n    top: 100%;\n  }\n`;\nconst container = css`\n  margin: auto;\n  padding: 24px 16px;\n`;\nconst stage = css`\n  height: 375px;\n  margin-top: 24px;\n`;\n\nconst button = css`\n  background: #fff;\n  margin-top: 8px;\n  border: 1px solid #b81c22;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: bold;\n  padding: 16px;\n  width: 100%;\n  &:hover {\n    background: #b81c22;\n    color: #d7c447;\n  }\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Animation } from \"./Animation\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Animation />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}